// Paths
path /indicators {
  read() { true }
}

path /indicators/{indicatorId} is Indicator;

path /users/{userId}/logs is Log[] {
  read() { isCurrentUser(userId) }
  write() { isCurrentUser(userId) }
}

path /users/{userId}/profile is Profile {
  read() { isCurrentUser(userId) }
  write() { isCurrentUser(userId) }
}

path /users/{userId}/references is Reference[] {
  read() { isCurrentUser(userId) }
  write() { isCurrentUser(userId) }
}

path /users/{userId}/reports is Report[] {
  read() { isCurrentUser(userId) }
  write() { isCurrentUser(userId) }
}

path /users/{userId}/timelines is Timeline[] {
  read() { isCurrentUser(userId) }
  write() { isCurrentUser(userId) }
}

// Types
type Indicator {
  name: String
  unit: String
  reference: Reference
}

type Log {
  date: InitialTimestamp
  text: String
  indicators: Number[]
}

type Profile {
  name: String
  imageUrl: String | Null
  gender: Gender

  birthdate: PastTimestamp
  indicators: ProfileIndicator[]
}

type ProfileIndicator {
  date: Number
  value: Number
}

type Reference {
  min: Number
  max: Number
}

type Report {
  date: InitialTimestamp
  text: String
  indicators: Number[]
}

type Timeline extends Number[];

// Misc
type InitialTimestamp extends Number {
  validate() { this == (prior(this) == null ? now : prior(this)) }
}

type PastTimestamp extends Number {
  validate() { this < now }
}

type Gender extends String {
  validate() { this == 'male' || this == 'female' || this == 'other' }
}

// Functions
function isAuthenticated() {
  auth != null
}

function isCurrentUser(uid) {
  isAuthenticated() && auth.uid == uid
}
